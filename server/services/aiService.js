import OpenAI from 'openai';
import axios from 'axios';

class AIService {
  constructor() {
    // Initialize OpenAI client only if API key is present
    if (process.env.OPENAI_API_KEY) {
      this.openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      });
    } else {
      console.warn('⚠️ OpenAI API key not configured - OpenAI features will be unavailable');
      this.openai = null;
    }
    
    this.perplexityApiKey = process.env.PERPLEXITY_API_KEY;
    this.googleApiKey = process.env.GOOGLE_AI_API_KEY;
    
    // Platform integration (legacy)
    this.hubApiUrl = process.env.HUB_API_URL;
    this.hubApiKey = process.env.HUB_API_KEY;
  }

  async generateContent(prompt, style = 'casual', maxRetries = 3) {
    // Build providers array based on available API keys
    const providers = [];
    
    if (this.perplexityApiKey) {
      providers.push({ name: 'perplexity', method: this.generateWithPerplexity.bind(this) });
    }
    
    if (this.googleApiKey) {
      providers.push({ name: 'google', method: this.generateWithGoogle.bind(this) });
    }
    
    if (this.openai && process.env.OPENAI_API_KEY) {
      providers.push({ name: 'openai', method: this.generateWithOpenAI.bind(this) });
    }

    if (providers.length === 0) {
      throw new Error('No AI providers configured. Please set at least one API key (PERPLEXITY_API_KEY, GOOGLE_AI_API_KEY, or OPENAI_API_KEY)');
    }

    console.log(`Available AI providers: ${providers.map(p => p.name).join(', ')}`);

    let lastError = null;

    for (const provider of providers) {
      try {
        console.log(`Attempting content generation with ${provider.name}...`);
        const result = await provider.method(prompt, style);
        console.log(`✅ Content generated successfully with ${provider.name}`);
        return {
          content: result,
          provider: provider.name,
          success: true
        };
      } catch (error) {
        console.error(`❌ ${provider.name} generation failed:`, error.message);
        lastError = error;
        continue;
      }
    }

    throw new Error(`All AI providers failed. Last error: ${lastError?.message || 'Unknown error'}`);
  }

  async generateWithPerplexity(prompt, style) {
    if (!this.perplexityApiKey) {
      throw new Error('Perplexity API key not configured');
    }

    const stylePrompts = {
      professional: 'Write in a professional, business-appropriate tone.',
      casual: 'Write in a casual, conversational tone.',
      witty: 'Write with humor and wit, be clever and engaging.',
      inspirational: 'Write in an inspirational, motivational tone.',
      informative: 'Write in an informative, educational tone.'
    };

    const systemPrompt = `You are a helpful assistant that creates Twitter/X posts based on user requests. ${stylePrompts[style] || stylePrompts.casual} 

Guidelines:
- If the user asks for information (lists, facts, recommendations), provide that information directly
- If the user asks for "top 5 anime", list the actual top 5 anime, not your personal picks
- If the user asks for facts or data, provide accurate information
- Format the response as a tweet (under 250 characters when possible)
- Include relevant hashtags when appropriate (max 2-3)
- Be informative and helpful first, engaging second
- If asking for trends or current info, focus on factual, up-to-date information

Generate a tweet that directly answers the user's request with factual information. If they ask for a list, provide the list. If they ask for information, provide that information.`;

    try {
      const response = await axios.post(
        'https://api.perplexity.ai/chat/completions',
        {
          model: 'sonar',
          messages: [
            { role: 'user', content: `${systemPrompt}\n\nUser request: ${prompt}` }
          ],
          max_tokens: 200,
          temperature: 0.5
        },
        {
          headers: {
            'Authorization': `Bearer ${this.perplexityApiKey}`,
            'Content-Type': 'application/json'
          }
        }
      );

      const content = response.data.choices[0]?.message?.content?.trim();
      if (!content) {
        throw new Error('No content generated by Perplexity');
      }

      return content;
    } catch (error) {
      console.error('Perplexity API Error Details:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      });
      
      if (error.response?.status === 400) {
        const errorData = error.response.data;
        throw new Error(`Perplexity API Error: ${errorData.error?.message || errorData.message || 'Bad Request'}`);
      }
      
      throw error;
    }
  }

  async generateWithGoogle(prompt, style) {
    if (!this.googleApiKey) {
      throw new Error('Google AI API key not configured');
    }

    const stylePrompts = {
      professional: 'professional and business-appropriate',
      casual: 'casual and conversational',
      witty: 'witty, humorous, and clever',
      inspirational: 'inspirational and motivational',
      informative: 'informative and educational'
    };

    const systemPrompt = `Create a Twitter/X post that directly answers the user's request with factual information. Be ${stylePrompts[style] || 'casual and conversational'}.

Guidelines:
- If user asks for information, lists, or recommendations, provide them directly
- If user asks for "top 5 anime", list the actual highest-rated anime, not personal opinions
- Provide factual, helpful information first
- Keep under 250 characters when possible
- Include 1-2 relevant hashtags if appropriate
- Be informative and accurate

Answer the user's request with factual information formatted as a tweet.`;

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${this.googleApiKey}`,
      {
        contents: [{
          parts: [{
            text: `${systemPrompt}\n\nUser request: ${prompt}`
          }]
        }],
        generationConfig: {
          temperature: 0.3,
          topK: 1,
          topP: 1,
          maxOutputTokens: 200,
        },
        safetySettings: [
          {
            category: 'HARM_CATEGORY_HARASSMENT',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            category: 'HARM_CATEGORY_HATE_SPEECH',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          }
        ]
      },
      {
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );

    const content = response.data.candidates[0]?.content?.parts[0]?.text?.trim();
    if (!content) {
      throw new Error('No content generated by Google Gemini');
    }

    return content;
  }

  async generateWithOpenAI(prompt, style) {
    if (!this.openai || !process.env.OPENAI_API_KEY) {
      throw new Error('OpenAI API key not configured');
    }

    const stylePrompts = {
      professional: 'Write in a professional, business-appropriate tone.',
      casual: 'Write in a casual, conversational tone.',
      witty: 'Write with humor and wit, be clever and engaging.',
      inspirational: 'Write in an inspirational, motivational tone.',
      informative: 'Write in an informative, educational tone.'
    };

    const systemPrompt = `You are a helpful assistant that creates informative Twitter/X posts. ${stylePrompts[style] || stylePrompts.casual}

Guidelines:
- When users ask for information, lists, or recommendations, provide them directly and factually
- If asked for "top 5 anime", provide the actual highest-rated or most popular anime based on data
- Be informative and helpful first, engaging second
- Keep tweets under 250 characters for better engagement
- Include relevant hashtags when appropriate (max 2-3)
- Focus on accuracy and usefulness over generic social media engagement
- Avoid personal opinions unless specifically requested

Create a tweet that directly and factually answers the user's request with useful information.`;

    const response = await this.openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: prompt }
      ],
      max_tokens: 200,
      temperature: 0.3,
    });

    const content = response.choices[0]?.message?.content?.trim();
    if (!content) {
      throw new Error('No content generated by OpenAI');
    }

    return content;
  }

  async generateMultipleOptions(prompt, style = 'casual', count = 3) {
    const results = [];
    const errors = [];

    // Try to generate multiple options, but don't fail if some don't work
    for (let i = 0; i < count; i++) {
      try {
        const result = await this.generateContent(prompt, style);
        results.push(result);
      } catch (error) {
        errors.push(error.message);
        // If we can't generate any options, throw the error
        if (results.length === 0 && i === count - 1) {
          throw error;
        }
      }
    }

    return {
      options: results,
      errors: errors.length > 0 ? errors : null
    };
  }

  // Legacy methods for platform integration
  async getHubProviders(userId) {
    try {
      const response = await axios.get(`${this.hubApiUrl}/api/ai/providers/${userId}`, {
        headers: {
          'X-API-Key': this.hubApiKey,
          'X-Service': 'tweet-genie'
        }
      });

      return response.data.providers;
    } catch (error) {
      // If Platform doesn't have providers endpoint yet, return empty object silently
      if (error.response?.status === 404) {
        console.log('Hub providers endpoint not available, using fallback');
        return {};
      }
      console.error('Error fetching hub providers:', error.message);
      return {};
    }
  }

  async generateTweets(params) {
    const { prompt, provider, style, hashtags, mentions, max_tweets, userId } = params;

    // Try new direct AI generation first, fallback to hub if needed
    try {
      const result = await this.generateContent(prompt, style);
      return [result.content];
    } catch (directError) {
      console.error('Direct AI generation failed, trying hub provider:', directError);
      
      // Fallback to platform hub providers for AI generation
      try {
        return await this.generateWithHubProvider(params);
      } catch (hubError) {
        console.error('Hub provider error:', hubError);
        throw new Error(`AI generation failed: ${hubError.message}`);
      }
    }
  }

  async generateWithHubProvider(params) {
    try {
      const response = await axios.post(`${this.hubApiUrl}/api/ai/generate`, {
        ...params,
        service: 'tweet-genie'
      }, {
        headers: {
          'X-API-Key': this.hubApiKey,
          'X-Service': 'tweet-genie'
        }
      });

      return response.data.tweets;
    } catch (error) {
      console.error('Hub AI generation error:', error);
      throw error;
    }
  }
}

export const aiService = new AIService();
